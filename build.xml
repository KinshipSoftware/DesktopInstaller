<?xml version="1.0"?>
<!--
 * application.xml
 * Created on 10 September 2008, 10:03
 * Modified on 21 September 2011, 14:27
 * @author Peter.Withers@mpi.nl
-->
<project name="installer" default="maven-jar">
    <target name="setproperties">
        <loadproperties srcfile="../application.properties" />
        <property name="APPNAME" value="${application.name}" />
        <property name="SRCDIR" location="${application.baseDir}src/main/java/"/>
        <property name="IconsDir" location="${application.baseDir}${application.iconsDir}"/>
        <property name="OUTPUTDIR" location="./target"/>
        <property name="LIBDIR" location="${OUTPUTDIR}lib/"/>
        <property name="KeyStoreLocation" location="${application.baseDir}${mpi.keystorelocation}" />
        <property name="TypeCheckVersion" value="1.6.5" />
        <property name="application.icon-file-name" value="${APPNAME}${application.branch}128x128"/>
    </target>
    <target name="loadproperties" depends="maven-compile">
        <loadproperties srcfile="../target/classes/version.properties" />
        <property name="JarPrefix" value="${APPNAME}${application.branch}-${application.majorVersion}-${application.minorVersion}-${application.revision}"/>
        <property name="DistJarName" value="${JarPrefix}.jar"/>
    </target>
    <target name="clean" description="remove all artifact files" depends="setproperties">
        <delete dir="${OUTPUTDIR}"/>
        <mkdir dir="${OUTPUTDIR}"/>
    </target>
<!-- start package creation -->
    <path id="ant-deb.classpath">
        <fileset dir="./ant-deb-jar/" includes="*.jar"/>
    </path>
    <!-- http://code.google.com/p/ant-deb-task/ -->
    <taskdef name="deb" classname="com.googlecode.ant_deb_task.Deb" classpathref="ant-deb.classpath"/>
    <taskdef name="desktopEntry" classname="com.googlecode.ant_deb_task.DesktopEntry" classpathref="ant-deb.classpath"/>
    <target name="makeDebPackage" depends="maven-jar" description="build the deb file">
        <property name="package.name" value="${APPNAME}${application.branch}"/>
        <property name="package.jarname" value="${DistJarName}"/>
        <!--check that the icon exists and fail if not-->
        <available file="${IconsDir}${application.icon-file-name}.png" property="packageIconAvail"/>
        <fail unless="packageIconAvail" message="${IconsDir}${application.icon-file-name}.png doesn't exist!"/>
        <property name="distributionDirectory" value="${OUTPUTDIR}/distribution"/>
        <mkdir dir="${distributionDirectory}"/>
        <desktopEntry
            toFile="${distributionDirectory}/${package.name}.desktop"
            name="${application.title}"
            comment="${application.shortDescription}"
            exec="java -jar /usr/share/${package.name}/${package.jarname}"
            path="/usr/share/${package.name}/"
            icon="/usr/share/${package.name}/${application.icon-file-name}.png"
            categories="Science;Education;Java"
        />
        <deb
            todir="${distributionDirectory}"
            package="${package.name}"
            section="science"
            depends="sun-java5-jre | sun-java6-jre, ffmpeg, imagemagick"            
        > <!-- homepage="http://www.lat-mpi.eu/tools/kinoath" deb doesn't support the "homepage" attribute -->
            <version upstream="${application.majorVersion}.${application.minorVersion}" debian="${application.revision}"/>
            <maintainer name="Peter Withers" email="Peter.Withers@mpi.nl"/>
            <description synopsis="${application.shortDescription}">${application.longDescription}</description>
            <tarfileset file="${OUTPUTDIR}/${package.jarname}" prefix="usr/share/${package.name}"/>
            <tarfileset file="${IconsDir}${application.icon-file-name}.png" prefix="usr/share/${package.name}"/>
            <tarfileset dir="${LIBDIR}" prefix="usr/share/${package.name}/lib">
                <include name="*.jar"/>
            </tarfileset>
            <tarfileset file="${distributionDirectory}/${package.name}.desktop" prefix="usr/share/applications/"/>
        </deb>
    </target>
<!-- end package creation -->
    <target name="updateJnlpAndAppletHtml" depends="loadproperties">
<!--todo: the jar name should have the application.branch included-->
        <macrodef name="updateSingleFile">
            <attribute name="fileName"/>
            <sequential>
                <copy overwrite="true" file="./templates/@{fileName}.template" tofile="${OUTPUTDIR}/distribution/@{fileName}">
                    <filterchain>
                        <replacetokens>
                            <token key="VersionNumber" value="${application.majorVersion}-${application.minorVersion}-${application.revision}"/>
                            <token key="DistJarName" value="${DistJarName}"/>
                            <token key="BuildDirectory" value="${APPNAME}-build-${application.majorVersion}.${application.minorVersion}.x"/>
                            <token key="InstalledIcon" value="${application.icon-file-name}"/>
                            <token key="TypeCheckVersion" value="${TypeCheckVersion}"/>
                            <token key="FilenameIdentifier" value="${application.branch}"/>
                            <token key="ApplicationTitle" value="${application.title}"/>
                            <token key="LongDescription" value="${application.longDescription}"/>
                            <token key="ShortDescription" value="${application.shortDescription}"/>
                            <token key="DistName" value="${APPNAME}"/>
                            <token key="AppName" value="${application.title}"/>
                            <token key="MainClass" value="${application.mainClass}"/>
                        </replacetokens>
                    </filterchain>
                </copy>
            </sequential>
        </macrodef>
        <updateSingleFile fileName="application.jnlp"/>
        <updateSingleFile fileName="win-installer.iss"/>
        <updateSingleFile fileName="Info.plist"/>
        <updateSingleFile fileName="start"/>
        <copy file="${OUTPUTDIR}/distribution/application.jnlp" tofile="${SRCDIR}/JNLP-INF/${APPNAME}.jnlp"/>
    </target>
    <target name="buildWindowsInstaller" depends="signapplication">
        <!--check that the icon exists and fail if not-->
        <available file="${IconsDir}${application.icon-file-name}.ico" property="installedIconAvail"/>
        <fail unless="installedIconAvail" message="${application.icon-file-name}.ico doesn't exist!"/>
        <mkdir dir="${OUTPUTDIR}/distribution-win32/temp/"/>
        <copy todir="${OUTPUTDIR}/distribution-win32/temp/">
            <fileset dir="${IconsDir}" includes="*.ico"/>
        </copy>
        <!--get unzip then delete the imagemagick jar-->
<!--        <get src="http://www.mpi.nl/tg/j2se/jnlp/kinoath/lib/ImageMagick-6.5.9-Win32.jar" dest="${OUTPUTDIR}/ImageMagick-6.5.9-Win32.jar"/>
        <unzip src="${OUTPUTDIR}/ImageMagick-6.5.9-Win32.jar" dest="${OUTPUTDIR}/distribution-win32/temp/ImageMagick"/>
        <delete file="${OUTPUTDIR}/ImageMagick-6.5.9-Win32.jar"/>
        <delete dir="${OUTPUTDIR}/distribution-win32/temp/ImageMagick/META-INF"/>-->
        <exec dir="${OUTPUTDIR}" executable="wine" ><!--os="Windows NT"-->
            <arg line='"C:\Program Files\Inno Setup 5\iscc.exe" ./distribution/win-installer.iss'/>
        </exec>
        <delete dir="${OUTPUTDIR}/distribution-win32/${APPNAME}${application.branch}-installer.zip"/>
        <zip destfile="${OUTPUTDIR}/distribution-win32/${APPNAME}${application.branch}-installer.zip" >
            <file file="${OUTPUTDIR}/distribution-win32/${APPNAME}-installer-${application.majorVersion}-${application.minorVersion}-${application.revision}.exe"/>
        </zip>
        <available file="${OUTPUTDIR}/distribution-win32/${APPNAME}${application.branch}-installer.zip" property="installerZipMissing"/>
        <fail unless="installerZipMissing" message="${APPNAME}${application.branch}-installer.zip doesn't exist! Is Inno Setup installed inside wine?"/>
    </target>
    <target name="buildMacInstaller" depends="signapplication">
        <!--check that the icon exists and fail if not-->
        <available file="${IconsDir}${APPNAME}${application.branch}.icns" property="installedIconAvail"/>
        <fail unless="installedIconAvail" message="${APPNAME}${application.branch}.icns doesn't exist!"/>
        <copy file="${OUTPUTDIR}/distribution/Info.plist" todir="${OUTPUTDIR}/distribution-mac/${APPNAME}${application.branch}.app/Contents/"/>
        <copy file="${OUTPUTDIR}/distribution/start" todir="${OUTPUTDIR}/distribution-mac/${APPNAME}${application.branch}.app/Contents/MacOS/"/>
        <copy file="${IconsDir}${APPNAME}${application.branch}.icns" todir="${OUTPUTDIR}/distribution-mac/${APPNAME}${application.branch}.app/Contents/Resources/"/>
        <copy file="${OUTPUTDIR}/${DistJarName}" todir="${OUTPUTDIR}/distribution-mac/${APPNAME}${application.branch}.app/Contents/MacOS/"/>
        <copy todir="${OUTPUTDIR}/distribution-mac/${APPNAME}${application.branch}.app/Contents/MacOS/lib/">
            <fileset dir="${OUTPUTDIR}/lib/" includes="*.jar"/>
        </copy>
        <chmod file="${OUTPUTDIR}/distribution-mac/${APPNAME}${application.branch}.app/Contents/MacOS/start" perm="a+xr"/>
        <tar destfile="${OUTPUTDIR}/distribution-mac/${APPNAME}${application.branch}-mac.tar">
            <tarfileset dir="${OUTPUTDIR}/distribution-mac/" filemode="755" username="ant" group="ant">
                <include name="${APPNAME}${application.branch}.app/Contents/MacOS/start"/>
            </tarfileset>
            <tarfileset dir="${OUTPUTDIR}/distribution-mac/" filemode="664" username="ant" group="ant">
                <include name="${APPNAME}${application.branch}.app/**"/>
                <exclude name="${APPNAME}${application.branch}.app/Contents/MacOS/start"/>
            </tarfileset>
        </tar>
    </target>
    <target name="signapplication" depends="maven-jar">
        <input message="Please enter the latsoftware password:" addproperty="latsoftware.pw">
            <handler classname="org.apache.tools.ant.input.SecureInputHandler" />
        </input>
        <signjar keystore="${KeyStoreLocation}"
        alias="latsoftware's max-planck-gesellschaft id" storepass="${latsoftware.pw}">
            <path>
                <fileset dir="${OUTPUTDIR}/lib" includes="**/*.jar" />
            </path>
        </signjar>
        <signjar jar="${OUTPUTDIR}/${DistJarName}"
        keystore="${KeyStoreLocation}"
        alias="latsoftware's max-planck-gesellschaft id" storepass="${latsoftware.pw}" />
    </target>
   <!-- <target name="image" depends="setproperties">
        <signjar jar="${OUTPUTDIR}/lib/typecheck-1.5.16185.jar"
        keystore="${SRCDIR}/../../../trunk/cert/mpi.keystore"
        alias="latsoftware's max-planck-gesellschaft id" storepass="koekoek" />
    </target> -->
    <target name="GetTracTodoList" depends="GetLoginData">
<!--        todo: add another file for the rss feed of completed tasks-->        
        <property name="TodoListFile" value="${OUTPUTDIR}/distribution/${APPNAME}${application.branch}_${application.majorVersion}.${application.minorVersion}-${application.revision}_todo.csv"/>
        <get src="https://trac.mpi.nl/query?status=accepted&amp;status=assigned&amp;status=new&amp;status=reopened&amp;component=${APPNAME}-desktop&amp;component=${APPNAME}-web&amp;format=csv&amp;max=1000&amp;col=id&amp;col=summary&amp;col=component&amp;report=24&amp;order=summary"
    dest="${TodoListFile}"
    username="${lux09.user}"
    password="${lux09.pw}"/>
        <scp file="${TodoListFile}" todir="${lux09.user}:${lux09.pw}@lux09.mpi.nl:/data/extweb1/docs/TG/j2se/jnlp/${APPNAME}/"/>
        <scp file="${TodoListFile}" todir="${lux09.user}:${lux09.pw}@lux09.mpi.nl:/data/extweb1/docs/TG/j2se/jnlp/${APPNAME}/${APPNAME}-all_todo.csv"/> <!-- ${application.branch}-->
    </target>
    <target name="GetLoginData">
        <input message="Please enter lux09 username:" addproperty="lux09.user" />
        <input message="Please enter lux09 password:" addproperty="lux09.pw">
            <handler classname="org.apache.tools.ant.input.SecureInputHandler" />
        </input>
    </target>
    <target name="scp_to_lux09" depends="makeDebPackage, buildWindowsInstaller, buildMacInstaller, GetLoginData, GetTracTodoList">
        <echo file="${OUTPUTDIR}/${APPNAME}${application.branch}-current.txt">${application.revision}</echo>
        <scp file="${OUTPUTDIR}/${DistJarName}" todir="${lux09.user}:${lux09.pw}@lux09.mpi.nl:/data/extweb1/docs/TG/j2se/jnlp/${APPNAME}/"/>
        <!-- the lib direcory only needs to be updated when there is a real change so can be commented out to save build time -->
        <scp todir="${lux09.user}:${lux09.pw}@lux09.mpi.nl:/data/extweb1/docs/TG/j2se/jnlp/${APPNAME}/lib">
            <fileset dir="${OUTPUTDIR}/lib"/>
        </scp>
        <scp file="${IconsDir}${application.icon-file-name}.png" todir="${lux09.user}:${lux09.pw}@lux09.mpi.nl:/data/extweb1/docs/TG/j2se/jnlp/${APPNAME}/"/>
        <!-- push the updated the applet html and the ${APPNAME} jnlp files to the server -->
        <scp file="${OUTPUTDIR}/distribution/application.jnlp" remoteTofile="${lux09.user}:${lux09.pw}@lux09.mpi.nl:/data/extweb1/docs/TG/j2se/jnlp/${APPNAME}/${APPNAME}${application.branch}.jnlp"/>
        <!-- the non numbered version of the jnlp will allow the user to always get the latest update of that type. Whereas the build numbered version is of no use because it will always redirect to the latest version of its type not the version of the file name -->
<!--        <scp file="${OUTPUTDIR}/distribution/application.jnlp" remoteTofile="${lux09.user}:${lux09.pw}@lux09.mpi.nl:/data/extweb1/docs/TG/j2se/jnlp/${APPNAME}/${APPNAME}${application.branch}_${application.majorVersion}.${application.minorVersion}-${application.revision}.jnlp"/>-->
<!--        <scp file= "${BUILDDIR}/${APPNAME}-applet.html" remoteTofile="${lux09.user}:${lux09.pw}@lux09.mpi.nl:/data/extweb1/docs/TG/j2se/jnlp/${APPNAME}/${APPNAME}-applet${application.branch}.html"/>-->
        <!-- push the deb package -->
        <scp file="${distributionDirectory}/${APPNAME}${application.branch}_${application.majorVersion}.${application.minorVersion}-${application.revision}_all.deb" todir="${lux09.user}:${lux09.pw}@lux09.mpi.nl:/data/extweb1/docs/TG/j2se/jnlp/${APPNAME}/"/>
        <scp file="${distributionDirectory}/${APPNAME}${application.branch}_${application.majorVersion}.${application.minorVersion}-${application.revision}_all.deb" remoteTofile="${lux09.user}:${lux09.pw}@lux09.mpi.nl:/data/extweb1/docs/TG/j2se/jnlp/${APPNAME}/${APPNAME}${application.branch}.deb"/>
        <!-- push the windows installer -->
        <scp file="${OUTPUTDIR}/distribution-win32/${APPNAME}${application.branch}-installer.zip" todir="${lux09.user}:${lux09.pw}@lux09.mpi.nl:/data/extweb1/docs/TG/j2se/jnlp/${APPNAME}/"/>
        <scp file="${OUTPUTDIR}/distribution-win32/${APPNAME}${application.branch}-installer.zip" todir="${lux09.user}:${lux09.pw}@lux09.mpi.nl:/data/extweb1/docs/TG/j2se/jnlp/${APPNAME}/${APPNAME}${application.branch}_${application.majorVersion}.${application.minorVersion}-${application.revision}-win-installer.zip"/>
        <!-- push the mac installer -->
        <scp file="${OUTPUTDIR}/distribution-mac/${APPNAME}${application.branch}-mac.tar" todir="${lux09.user}:${lux09.pw}@lux09.mpi.nl:/data/extweb1/docs/TG/j2se/jnlp/${APPNAME}/"/>
        <scp file="${OUTPUTDIR}/distribution-mac/${APPNAME}${application.branch}-mac.tar" todir="${lux09.user}:${lux09.pw}@lux09.mpi.nl:/data/extweb1/docs/TG/j2se/jnlp/${APPNAME}/${APPNAME}${application.branch}_${application.majorVersion}.${application.minorVersion}-${application.revision}-mac.tar"/>
        <!-- only after all the installers have been pushed do we update the version text file -->
        <scp file="${OUTPUTDIR}/${APPNAME}${application.branch}-current.txt" todir="${lux09.user}:${lux09.pw}@lux09.mpi.nl:/data/extweb1/docs/TG/j2se/jnlp/${APPNAME}/"/>
        <!-- copy the current version of allversionslisting.php to make sure it gets kept in svn -->
        <scp file="${lux09.user}:${lux09.pw}@lux09.mpi.nl:/data/extweb1/docs/TG/j2se/jnlp/${APPNAME}/allversionslisting.php" todir="${application.baseDir}/src/main/php/" />
        <scp file="${lux09.user}:${lux09.pw}@lux09.mpi.nl:/data/extweb1/docs/TG/j2se/jnlp/${APPNAME}/todolisttable.php" todir="${application.baseDir}/src/main/php/" />
        <sshexec host="lux09.mpi.nl" username="${lux09.user}" password="${lux09.pw}" command="chmod a+r /data/extweb1/docs/TG/j2se/jnlp/${APPNAME}/${APPNAME}*" verbose="true" />
    </target>
    <target name="maven-compile" depends="setproperties">
        <!-- while this could be done in a maven ant task, this method appears more portable at this stage -->
        <exec dir="${application.baseDir}" executable="mvn" failonerror="true">
            <arg line="clean compile" />
            <arg line="-Doutput.directory=${OUTPUTDIR}"/>
        </exec>
    </target>    
    <target name="maven-jar" depends="updateJnlpAndAppletHtml">
        <!-- while this could be done in a maven ant task, this method appears more portable at this stage -->
        <exec dir="${application.baseDir}" executable="mvn" failonerror="true">
            <arg line="package" />
            <arg line="-Doutput.jarname=${JarPrefix}"/>
            <arg line="-Doutput.directory=${OUTPUTDIR}"/>
        </exec>
    </target>
    <target name="maven-deploy" depends="maven-jar">
        <!-- while this could be done in a maven and task, this method appears more portable at this stage -->
        <exec dir="${application.baseDir}" executable="mvn" failonerror="true">
            <arg line="install:install-file" />
            <arg line="-Dfile=${OUTPUTDIR}/${DistJarName}" />
<!--
            <arg line="-DgroupId=nl.mpi" />
            <arg line="-DartifactId=${APPNAME}" />
            <arg line="-Dversion=${application.majorVersion}.${application.minorVersion}.${application.revision}" />
-->
            <arg line="-Dpackaging=jar" />
            <arg line="-DpomFile=${application.baseDir}pom.xml" />
            <!-- -DgeneratePom=true -->
        </exec>
    </target>
    <target name="maven-clean" depends="setproperties">
        <exec dir="${application.baseDir}" executable="mvn" failonerror="true">
            <arg line="clean" />
            <arg line="-Doutput.directory=${OUTPUTDIR}"/>
        </exec>
    </target>
</project>
 
